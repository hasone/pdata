package com.cmcc.vrp.boss.guangdongcard.wsdl;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 */
@WebServiceClient(name = "ADCABServiceForOpen", targetNamespace = "http://tempuri.org/", wsdlLocation = "http://221.179.7.247/NGADCABInterface/NGADCABServicesForOpen.svc?wsdl")
public class ADCABServiceForOpen
    extends Service {

    private final static URL ADCABSERVICEFOROPEN_WSDL_LOCATION;
    private final static WebServiceException ADCABSERVICEFOROPEN_EXCEPTION;
    private final static QName ADCABSERVICEFOROPEN_QNAME = new QName("http://tempuri.org/", "ADCABServiceForOpen");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://221.179.7.247/NGADCABInterface/NGADCABServicesForOpen.svc?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        ADCABSERVICEFOROPEN_WSDL_LOCATION = url;
        ADCABSERVICEFOROPEN_EXCEPTION = e;
    }

    public ADCABServiceForOpen() {
        super(__getWsdlLocation(), ADCABSERVICEFOROPEN_QNAME);
    }

    public ADCABServiceForOpen(WebServiceFeature... features) {
        super(__getWsdlLocation(), ADCABSERVICEFOROPEN_QNAME, features);
    }

    public ADCABServiceForOpen(URL wsdlLocation) {
        super(wsdlLocation, ADCABSERVICEFOROPEN_QNAME);
    }

    public ADCABServiceForOpen(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, ADCABSERVICEFOROPEN_QNAME, features);
    }

    public ADCABServiceForOpen(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ADCABServiceForOpen(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    private static URL __getWsdlLocation() {
        if (ADCABSERVICEFOROPEN_EXCEPTION != null) {
            throw ADCABSERVICEFOROPEN_EXCEPTION;
        }
        return ADCABSERVICEFOROPEN_WSDL_LOCATION;
    }

    /**
     * @return returns NGADCABServiceForOpen
     */
    @WebEndpoint(name = "NGADCABServicesForOpen")
    public NGADCABServiceForOpen getNGADCABServicesForOpen() {
        return super.getPort(new QName("http://tempuri.org/", "NGADCABServicesForOpen"), NGADCABServiceForOpen.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  
     * Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns NGADCABServiceForOpen
     */
    @WebEndpoint(name = "NGADCABServicesForOpen")
    public NGADCABServiceForOpen getNGADCABServicesForOpen(WebServiceFeature... features) {
        return super.getPort(new QName("http://tempuri.org/", "NGADCABServicesForOpen"), NGADCABServiceForOpen.class, features);
    }

}
